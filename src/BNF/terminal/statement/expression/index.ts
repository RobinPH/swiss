import { ATOM, CONCAT, OR } from "../../..";
import { ARITHMETIC_OPERATORS } from "../../operator/arithmetic";
import { BITWISE_OPERATORS } from "../../operator/bitwise";
import { LOGICAL_BOOLEAN_OPERATORS } from "../../operator/logical";
import { RELATIONAL_BOOLEAN_OPERATORS } from "../../operator/relational";
import { UNARY_OPERATORS } from "../../operator/unary";
import { VALUE } from "../../value";
import { WHITESPACE } from "../../whitespace";

export const EXPRESSION = OR().name("EXPRESSION");

export const OPENING_PARENTHESIS = ATOM("(").name("OPENING_PARENTHESIS");
export const CLOSING_PARENTHESIS = ATOM(")").name("CLOSING_PARENTHESIS");

export let VALUE2 = OR(VALUE).name("VALUE");

// @ts-ignore
VALUE2 = VALUE2.OR(
  CONCAT(OPENING_PARENTHESIS, VALUE2, CLOSING_PARENTHESIS).name(
    "PARENTHESIS_ENCLOSED_VALUE"
  )
);

export const ARITHMETIC_EXPRESSION = CONCAT(
  VALUE2,
  WHITESPACE,
  ARITHMETIC_OPERATORS,
  WHITESPACE,
  EXPRESSION
).name("ARITHMETIC_EXPRESSION");

export const BITWISE_EXPRESSION = CONCAT(
  VALUE2,
  WHITESPACE,
  BITWISE_OPERATORS,
  WHITESPACE,
  EXPRESSION
).name("BITWISE_EXPRESSION");

export const LOGICAL_EXPRESSION = CONCAT(
  VALUE2,
  WHITESPACE,
  LOGICAL_BOOLEAN_OPERATORS,
  WHITESPACE,
  EXPRESSION
).name("LOGICAL_EXPRESSION");

export const RELATIONAL_EXPRESSION = CONCAT(
  VALUE2,
  WHITESPACE,
  RELATIONAL_BOOLEAN_OPERATORS,
  WHITESPACE,
  EXPRESSION
).name("RELATIONAL_EXPRESSION");

export const UNARY_EXPRESSION = OR(
  CONCAT(UNARY_OPERATORS, WHITESPACE, VALUE2),
  CONCAT(VALUE2, WHITESPACE, UNARY_OPERATORS)
).name("UNARY_EXPRESSION");

// @ts-ignore
// VALUE2 = VALUE2.OR(EXPRESSION);

// @ts-ignore
EXPRESSION = EXPRESSION.OR(
  CONCAT(OPENING_PARENTHESIS, EXPRESSION, CLOSING_PARENTHESIS).name(
    "PARENTHESIS_ENCLOSED_EXPRESSION"
  )
);

// @ts-ignore
EXPRESSION = EXPRESSION.OR(
  ARITHMETIC_EXPRESSION,
  BITWISE_EXPRESSION,
  LOGICAL_EXPRESSION,
  RELATIONAL_EXPRESSION,
  UNARY_EXPRESSION,
  VALUE2
);
