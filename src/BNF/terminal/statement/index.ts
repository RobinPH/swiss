import { ATOM, CONCAT, OR, STAR, WORD } from "../..";
import { DECLARATOR } from "../declarator";
import { EXPRESSION } from "./expression";
import { IDENTIFIER } from "../identifier";
import {
  ASSIGNMENT_OPERATOR,
  ASSIGNMENT_OPERATORS,
} from "../operator/assignment";
import { SEMICOLON } from "../specialCharacter";
import { VALUE } from "../value";
import { NON_EMPTY_WHITESPACE, WHITESPACE } from "../whitespace";

let _STATEMENTS = OR().name("STATEMENTS");

export const CODE_BLOCK = CONCAT(
  ATOM("{").name("OPENING_CURLY"),
  STAR(CONCAT(WHITESPACE, _STATEMENTS, WHITESPACE)),
  ATOM("}").name("CLOSING_CURLY")
).name("CODE_BLOCK");

export const DECLARATION_STATEMENT = CONCAT(
  DECLARATOR,
  NON_EMPTY_WHITESPACE,
  IDENTIFIER,
  WHITESPACE,
  ASSIGNMENT_OPERATOR,
  WHITESPACE,
  EXPRESSION
).name("DECLARATION_STATEMENT");

export const ASSIGNMENT_STATEMENT = CONCAT(
  IDENTIFIER,
  WHITESPACE,
  ASSIGNMENT_OPERATORS,
  WHITESPACE,
  EXPRESSION
).name("ASSIGNMENT_STATEMENT");

export const IF_STATEMENT = CONCAT(
  WORD("if").name("IF"),
  WHITESPACE,
  ATOM("("),
  WHITESPACE,
  EXPRESSION,
  WHITESPACE,
  ATOM(")"),
  WHITESPACE,
  CODE_BLOCK
);

export const FOR_STATEMENT = CONCAT(
  WORD("for").name("FOR"),
  WHITESPACE,
  ATOM("("),
  WHITESPACE,
  OR(DECLARATION_STATEMENT, ASSIGNMENT_STATEMENT, EXPRESSION),
  WHITESPACE,
  SEMICOLON,
  WHITESPACE,
  OR(DECLARATION_STATEMENT, ASSIGNMENT_STATEMENT, EXPRESSION),
  WHITESPACE,
  SEMICOLON,
  WHITESPACE,
  OR(DECLARATION_STATEMENT, ASSIGNMENT_STATEMENT, EXPRESSION),
  WHITESPACE,
  ATOM(")"),
  WHITESPACE,
  CODE_BLOCK
);

// @ts-ignore
_STATEMENTS = _STATEMENTS.OR(
  CONCAT(
    OR(DECLARATION_STATEMENT, ASSIGNMENT_STATEMENT, EXPRESSION),
    SEMICOLON
  ).name("STATEMENTS"),
  IF_STATEMENT,
  FOR_STATEMENT
);
